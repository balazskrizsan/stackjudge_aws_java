/*
 * This file is generated by jOOQ.
 */
package com.kbalazsworks.stackjudge_aws.db.tables;


import com.kbalazsworks.stackjudge_aws.db.Public;
import com.kbalazsworks.stackjudge_aws.db.tables.records.RemoteFilesRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RemoteFiles extends TableImpl<RemoteFilesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.remote_files</code>
     */
    public static final RemoteFiles REMOTE_FILES = new RemoteFiles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RemoteFilesRecord> getRecordType() {
        return RemoteFilesRecord.class;
    }

    /**
     * The column <code>public.remote_files.id</code>.
     */
    public final TableField<RemoteFilesRecord, String> ID = createField(DSL.name("id"), SQLDataType.CHAR(36), this, "");

    /**
     * The column <code>public.remote_files.path</code>.
     */
    public final TableField<RemoteFilesRecord, String> PATH = createField(DSL.name("path"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.remote_files.filename</code>.
     */
    public final TableField<RemoteFilesRecord, String> FILENAME = createField(DSL.name("filename"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.remote_files.s3_e_tag</code>.
     */
    public final TableField<RemoteFilesRecord, String> S3_E_TAG = createField(DSL.name("s3_e_tag"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.remote_files.s3_content_md5</code>.
     */
    public final TableField<RemoteFilesRecord, String> S3_CONTENT_MD5 = createField(DSL.name("s3_content_md5"), SQLDataType.VARCHAR(255), this, "");

    private RemoteFiles(Name alias, Table<RemoteFilesRecord> aliased) {
        this(alias, aliased, null);
    }

    private RemoteFiles(Name alias, Table<RemoteFilesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.remote_files</code> table reference
     */
    public RemoteFiles(String alias) {
        this(DSL.name(alias), REMOTE_FILES);
    }

    /**
     * Create an aliased <code>public.remote_files</code> table reference
     */
    public RemoteFiles(Name alias) {
        this(alias, REMOTE_FILES);
    }

    /**
     * Create a <code>public.remote_files</code> table reference
     */
    public RemoteFiles() {
        this(DSL.name("remote_files"), null);
    }

    public <O extends Record> RemoteFiles(Table<O> child, ForeignKey<O, RemoteFilesRecord> key) {
        super(child, key, REMOTE_FILES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public RemoteFiles as(String alias) {
        return new RemoteFiles(DSL.name(alias), this);
    }

    @Override
    public RemoteFiles as(Name alias) {
        return new RemoteFiles(alias, this);
    }

    @Override
    public RemoteFiles as(Table<?> alias) {
        return new RemoteFiles(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RemoteFiles rename(String name) {
        return new RemoteFiles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RemoteFiles rename(Name name) {
        return new RemoteFiles(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RemoteFiles rename(Table<?> name) {
        return new RemoteFiles(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
